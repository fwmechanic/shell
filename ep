#!/usr/bin/env bash

die() { printf %s "${@+$@$'\n'}" 1>&2 ; exit 1 ; }

find_ec_binary() (
   ecxbnm="ebook-convert"
   if command -v "$ecxbnm"; then
      echo "$ecxbnm"
      return 0
   fi

   declare -a calibre_locns=( "$HOME/my/bin"  "$LOCALAPPDATA/Programs" )
   for dnm in "${calibre_locns[@]}"; do
      ecexe="$dnm/Calibre Portable/Calibre/$ecxbnm.exe"
      if [[ -x "$ecexe" ]]; then
         echo "$ecexe"
         return 0
      fi
   done
   die "$ecxbnm is not in PATH or ${calibre_locns[*]}"
   )
ecbin="$(find_ec_binary)"

convert_to_pdf() (
   # https://manual.calibre-ebook.com/generated/en/ebook-convert.html#pdf-output-options
   mpts="3" mpo='--pdf-page-margin-'
   set -x  # show actual cmdline
   "$ecbin" "$1" "$2" --output-profile=ipad --use-profile-size "${mpo}bottom=$mpts" "${mpo}left=$mpts" "${mpo}right=$mpts" "${mpo}top=$mpts"
   )

do1file() (
   fnm="$1"
   [[ -f "$fnm" ]] || die "$fnm does not name a file"
   ext="${fnm##*.}"
   if [[ "$ext" && "${ext^^}" == "PDF" ]]; then  # don't try to convert a PDF to PDF
      echo "skipping: src is $ext '$fnm'"
   else
      if [[ $fnm != */* ]]; then
         fpath=""
      else
         fpath="${fnm%/*}/"
      fi                                  # ; echo "fpath=$fpath'"
      sanspath="${fnm##*/}"               # ; echo "sanspath=$sanspath'"    # https://stackoverflow.com/a/965069
      sansext="${sanspath%.*}"            # ; echo "sansext=$sansext'"
      srcfnm="$fnm"                       # ; echo "srcfnm=$srcfnm'"
      tgtfnm="$fpath$sansext.medtype.pdf" # ; echo "tgtfnm=$tgtfnm'"
      if [[ -f "$tgtfnm" ]]; then
         echo "skipping: tgtfnm exists '$tgtfnm'"
      else
         logfnm="$fpath$sansext.log"      # ; echo "logfnm=$logfnm'"
         if [[ -f "$logfnm" ]]; then
            echo "skipping: logfile exists '$tgtfnm'"
         else
            echo "creating: $tgtfnm"
            if >"$logfnm" 2>&1 convert_to_pdf "$srcfnm" "$tgtfnm"; then
               # echo "log deleted"
               rm -f "${logfnm:?}"
            else
               echo "FAILED: see '${logfnm}'"
            fi
         fi
      fi
   fi
   )

for fnm in "$@"; do
   do1file "$fnm"
done

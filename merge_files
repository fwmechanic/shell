#!/usr/bin/env perl
use strict;
use warnings;
use File::Spec;
use Cwd;
use POSIX qw(strftime);
use File::Basename;

die "Usage: $0 <input_file>\n" unless @ARGV == 1;
my $input_file = $ARGV[0];
my $cwd = getcwd();

# Generate output filename with timestamp
my $timestamp = strftime("%y%m%d_%H%M%S", localtime);
my ($basename, $dir) = fileparse($input_file);
my $output_file = $basename . "_" . $timestamp;
$output_file = File::Spec->catfile($dir, $output_file);

# Collect all file paths first to determine prefix handling
my @filepaths;
open my $in_fh, '<', $input_file or die "Cannot open $input_file: $!\n";
while (my $line = <$in_fh>) {
    chomp $line;
    if ($line =~ m{^(/[^/]+/)}) {
        push @filepaths, $line;
    }
}
close $in_fh;

# Determine prefix handling strategy
my $all_under_cwd = 1;
my $common_prefix;

if (@filepaths) {
    for my $file (@filepaths) {
        unless ($file =~ m{\A\Q$cwd/\E}) {
            $all_under_cwd = 0;
            last;
        }
    }

    unless ($all_under_cwd) {
        my @paths = map { File::Spec->splitdir($_) } @filepaths;
        my $common_prefix_length = 0;
        COMPONENT: while (1) {
            my $component = $paths[0][$common_prefix_length] or last;
            for my $path (@paths[1..$#paths]) {
                last COMPONENT unless defined $path->[$common_prefix_length]
                    && $path->[$common_prefix_length] eq $component;
            }
            $common_prefix_length++;
        }
        $common_prefix = File::Spec->catdir(@{$paths[0]}[0..($common_prefix_length-1)]);
        $common_prefix = File::Spec->rootdir() if $common_prefix_length == 0;
    }
}

# Process input and generate output
open $in_fh, '<', $input_file or die "Cannot open $input_file: $!\n";
open my $out_fh, '>', $output_file or die "Cannot create $output_file: $!\n";

my $text_buffer = "";
my $in_code_block = 0;

while (my $line = <$in_fh>) {
    chomp $line;
    if ($line =~ m{^(/[^/]+/)}) {  # Line starts with /dirname/
        if ($text_buffer) {
            print $out_fh "$text_buffer\n\n";
            $text_buffer = "";
        }

        # Verify file exists
        unless (-f $line) {
            die "Error: '$line' does not name an existing file\n";
        }

        # Process filename for display
        my $display_name = $line;
        if ($all_under_cwd) {
            $display_name =~ s{\Q$cwd/\E}{};
        } elsif ($common_prefix ne File::Spec->rootdir()) {
            $display_name =~ s{\Q$common_prefix/?\E}{};
        }

        # Write file contents with header
        print $out_fh "contents of file '$display_name'\n\"\"\"\n";
        open my $file_fh, '<', $line or die "Cannot open $line: $!\n";
        while (<$file_fh>) {
            chomp;                  # chomp and print "\n" separately to ensure the last line of the file is
            print $out_fh $_, "\n"; # printed ending with a "\n" so the following `"""` always begins on a new line
        }
        print $out_fh "\"\"\"\n\n";
        close $file_fh;
    } else {
        if ($line =~ /^```/) {  # Code block delimiter
            if ($text_buffer) {
                print $out_fh "$text_buffer\n\n";
                $text_buffer = "";
            }
            $in_code_block = !$in_code_block;
            print $out_fh "$line\n";
        }
        elsif ($in_code_block) {
            print $out_fh "$line\n";
        }
        elsif ($line =~ /\S/) {  # Non-blank line outside code block
            $text_buffer .= " " if $text_buffer;
            $text_buffer .= $line;
        }
        elsif ($text_buffer) {  # Blank line and buffer has content
            print $out_fh "$text_buffer\n\n";
            $text_buffer = "";
        }
        else {  # Blank line and empty buffer
            print $out_fh "\n";
        }
    }
}

# Flush any remaining text
print $out_fh "$text_buffer\n" if $text_buffer;

close $in_fh;
close $out_fh;

# Write output filename to stdout
print "$output_file\n";

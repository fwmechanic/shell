#!/usr/bin/perl -w

use strict;
use warnings;
use English;
use Getopt::Std;
use File::Basename;
use File::Find;
use Time::Piece;
use Time::Seconds;

use FindBin;
use lib $FindBin::Bin;
use CCStmtP2tToCsv;  # utility fxns & constants
my $rpmdamtcapt = CCStmtP2tToCsv::rpmdamtcapt();

# usage: report1 $(find . -mindepth 2 -maxdepth 2 -type f -iname '#MONTHLY*.txt')

our ($opt_v,$opt_m);
getopts( "m:v" );
$opt_m //= 6; # last N full months (i.e. not including current month)

my $tmax = localtime;
   $tmax = $tmax - (      1    * ONE_MONTH);  # https://stackoverflow.com/a/17601119
my $tmin = $tmax - (($opt_m-1) * ONE_MONTH);  # https://stackoverflow.com/a/17601119

sub ym_to_st { sprintf "%04d/%02d", $_[0], $_[1]; }
my $minym = ym_to_st( $tmin->year, $tmin->mon );
my $maxym = ym_to_st( $tmax->year, $tmax->mon );

print "Report Interval [$minym..$maxym] ($opt_m months)\n";

my $allcents = 0;
my %byAmount;
for my $fnm ( @ARGV ) {  # print "$fnm\n";
   my ($billnm) = fileparse($fnm);
   my ($sumcents, $hits) = (0,0);
   my $addmonpymt = sub { my ($yr, $mon, $dc) = @_;
      my $ym = ym_to_st( $yr, $mon );
      if(   ($ym ge $minym)
         && ($ym le $maxym)
        ) {  #
         my $cents = CCStmtP2tToCsv::tocents($dc);
           printf "   %-10s += %s %s\n", $billnm, $ym, CCStmtP2tToCsv::cents_to_dc_pretty($cents) if $opt_v;
         # print "$billnm: $yr.$mon : $dc\n";
         $sumcents += $cents;
         ++$hits;
         }
      };

   open my $ifh, '<', $fnm or die "abend cannot open $fnm for reading: $!\n";
   while (<$ifh>) {
      chomp;
      if( m!^\s*billname\s+(\S+)! ) {
         $billnm = $1;
         next;
         }
      if( my ($ymin,$mmin,$ymax,$mmax,$dc) = m!^\s*fixed\-monthly\s+(\d{4})[._]?(\d{2})\-(\d{4})[._]?(\d{2})$rpmdamtcapt! ) {  # print "FM $dc  over $opt_m months\n";
         for( my $yr=$ymin; $yr<=$ymax; ++$yr ) {
            my ($mon,$monmax) = ($yr eq $ymin ? $mmin : "01", $yr eq $ymax ? $mmax : "12" );
            for( ; $mon<=$monmax; ++$mon ) {
               $addmonpymt->( $yr, $mon, $dc );
               }
            }
         next;
         }
      # print "$_\n";
      if( my ($yr,$mon,$dc) = m!^\s*\%\~dp0/(\d{4})[._]?(\d{2})[._]?\d{2}\S*$rpmdamtcapt! ) {
         $addmonpymt->( $yr, $mon, $dc );
         next;
         }
      }
   my $moncents = $sumcents / $opt_m;
   my $rec = sprintf( "%2d %-21s %5d.%02d / %d = %5d.%02d", $hits, $billnm, $sumcents / 100, $sumcents % 100, $opt_m, $moncents / 100, $moncents % 100 );
   push @{$byAmount{$sumcents}}, $rec;
   # printf "sc=%9d\n", $sumcents;

   $allcents += $sumcents;
   }

for my $sumcents (sort { $b <=> $a } keys %byAmount) {
   for my $rec (sort @{$byAmount{$sumcents}} ) {
      my $pct = ($sumcents * 1000) / $allcents;
      my $pd = sprintf( "%3d.%01d%%", $pct / 10, $pct % 10 );
      print $rec, $pd, "\n";
      }
   }

my $moncents = $allcents / $opt_m;
printf( "   %-21s %5d.%02d / %d = %5d.%02d\n", "TOTAL", $allcents / 100, $allcents % 100, $opt_m, $moncents / 100, $moncents % 100 );

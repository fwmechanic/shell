#!/usr/bin/perl -w

# usage: report1 $(find . -mindepth 2 -maxdepth 2 -type f -iname '#MONTHLY*.txt')

use strict;
use warnings;
use English;
use Getopt::Std;  $Getopt::Std::STANDARD_HELP_VERSION = 1;
use File::Basename;
use File::Find;
use Time::Piece;
use Time::Seconds;

use FindBin;
use lib $FindBin::Bin;
use CCStmtP2tToCsv;  # utility fxns & constants
my $rpmdamtcapt = CCStmtP2tToCsv::rpmdamtcapt();
my $c2dcp = \&CCStmtP2tToCsv::cents_to_dc_pretty;  # brevity

our ($opt_v,$opt_m);
getopts( "m:v" ) or die;

$opt_m //= 12; # last N full months (i.e. not including current month which is assumed to be incomplete)
my $tmax = localtime;
   $tmax = $tmax - (      1    * ONE_MONTH);  # https://stackoverflow.com/a/17601119
my $tmin = $tmax - (($opt_m-1) * ONE_MONTH);  # https://stackoverflow.com/a/17601119

sub ym_to_st { sprintf "%04d.%02d", $_[0], $_[1]; }
my $minym = ym_to_st( $tmin->year, $tmin->mon );
my $maxym = ym_to_st( $tmax->year, $tmax->mon );

printf "%2d month report interval: [%s..%s]\n", $opt_m, $minym, $maxym;

my $allcents = 0;
my $r1total = "   TOTAL";  # 3 leading spaces track "%2d " in $r1 sprintf
my $maxLen1 = length $r1total;
my %byAmount;
for my $fnm ( @ARGV ) {  # print "$fnm\n";
   my ($billnm) = fileparse($fnm);
   my ($sumcents, $hits) = (0,0);
   my $addmonpymt = sub { my ($yr, $mon, $dc) = @_;
      my $ym = ym_to_st( $yr, $mon );
      if(   ($ym ge $minym)
         && ($ym le $maxym)
        ) {  #
         my $cents = CCStmtP2tToCsv::tocents($dc);
           printf "   %-10s += %s %s\n", $billnm, $ym, $c2dcp->($cents) if $opt_v;
         # print "$billnm: $yr.$mon : $dc\n";
         $sumcents += $cents;
         ++$hits;
         }
      };

   open my $ifh, '<', $fnm or die "abend cannot open $fnm for reading: $!\n";
   while (<$ifh>) {
      chomp;
      if( m!^\s*billname\s+(\S+)! ) {
         $billnm = $1;
         next;
         }
      if( my ($ymin,$mmin,$ymax,$mmax,$dc) = m!^\s*fixed\-monthly\s+(\d{4})[._]?(\d{2})\-(\d{4})[._]?(\d{2})$rpmdamtcapt! ) {  # print "FM $dc  over $opt_m months\n";
         for( my $yr=$ymin; $yr<=$ymax; ++$yr ) {
            my ($mon,$monmax) = ($yr eq $ymin ? $mmin : "01", $yr eq $ymax ? $mmax : "12" );
            for( ; $mon<=$monmax; ++$mon ) {
               $addmonpymt->( $yr, $mon, $dc );
               }
            }
         next;
         }
      # print "$_\n";
      if( my ($yr,$mon,$dc) = m!^\s*\%\~dp0/(\d{4})[._]?(\d{2})[._]?\d{2}\S*$rpmdamtcapt! ) {
         $addmonpymt->( $yr, $mon, $dc );
         next;
         }
      }
   if( $sumcents > 0 ) {
      my $moncents = $sumcents / $opt_m;
      my $r1 = sprintf( "%2d %s", $hits, $billnm );  $maxLen1 = length $r1 if $maxLen1 < length $r1;
      my $r2 = sprintf( "%s / %d = %s", $c2dcp->( $sumcents ), $opt_m, $c2dcp->($moncents) );
      push @{$byAmount{$sumcents}}, [ $r1, $r2 ];
      # printf "sc=%9d\n", $sumcents;
      $allcents += $sumcents;
      }
   }

my $allkpcts = 0;
for my $sumcents (sort { $b <=> $a } keys %byAmount) {
   my $kpct = ($sumcents * 1000) / $allcents;  # NB: "kilopercent"
   my $pd = sprintf( "%3d.%01d%%", $kpct / 10, $kpct % 10 );
   for my $ar ( @{$byAmount{$sumcents}} ) {  # for now, no sorting (I expect `scalar @{$byAmount{$sumcents}}` > 1 approximately never)
      printf "%-*s %s %s\n", $maxLen1, @{$ar}[0], @{$ar}[1], $pd;
      }
   }

my $moncents = $allcents / $opt_m;
printf( "%-*s %s / %d = %s\n", $maxLen1, $r1total, $c2dcp->($allcents), $opt_m, $c2dcp->($moncents) );

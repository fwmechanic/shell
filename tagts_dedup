#!/usr/bin/env perl

# what this does:
#   * remove duplicate tags from a tagfile containing tags written
#   * in format matching `Universal Ctags` when run with options:
#       --tag-relative=yes --excmd=number --fields=+K+z+S+l+n --extras=+f
#   * preferring the tag having a greater number of fields (which ctags,
#       not ts_tagger would have generated).
#
# why it exists:
#   To remove logically duplicate (but typically less detailed) tags
#     generated by %~dp0/ts_tagger
#
# integration:
#   see script `tagts`

use strict;
use warnings;

my @prevTagFields;
my $prevTag;

while(<>) {
   chomp;
   my $thisTag = $_;
   my (@fields) = split("\t", $thisTag);
   # printf( STDERR "%d prevTag=%s\n", scalar @prevTagFields, $prevTag ) if $fields[0] eq 'SimAgent';
   # printf( STDERR "%d thisTag=%s\n", scalar @fields       , $thisTag ) if $fields[0] eq 'SimAgent';
   if( $prevTag ) {
      if( ($fields[0] eq $prevTagFields[0]) &&  # tagNm \ equality of these 3 fields defines a logical
          ($fields[1] eq $prevTagFields[1]) &&  # fnm   | dup; the remaining fields are nonessential,
          ($fields[2] eq $prevTagFields[2])     # ln#;  / but we'll choose the tag with more fields.
        ) {
         # printf( STDERR "3 fields eq!\n" ) if $fields[0] eq 'SimAgent';
         if( scalar @fields > scalar @prevTagFields ) { # prefer $_
            $prevTag = $thisTag;
            }
         next;  # dup, don't print anything
         }
      print $prevTag, "\n";
      }
   @prevTagFields = @fields;
   $prevTag = $_;
   }

print $prevTag, "\n" if $prevTag;

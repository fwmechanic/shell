#!/usr/bin/perl -w
# Usage: ./dgrep re

use strict;
use warnings;
use English;
use Getopt::Std;
use File::Basename;
use File::Find;

my $kdb_dnm = "$ENV{HOME}/my/repos/pers";

my($scriptname, $scriptdirs, $scriptsuffix) = fileparse($0);

sub die_w_usage {
   print STDERR <<"EOT";
$scriptname: diary-grep
usage: $scriptname [-h] [-a] [-c] [-d] [-f kdbfile] term [term [ ... ]]
  -h   this help
  -a   search all kdb files
  -c   entry search (entry=text betw date markers)
  -d   display date only
  -f kdbfile  search only kdbfile
EOT
   die "abend\n"
   }

our ($opt_a,$opt_c,$opt_d,$opt_f,$opt_h);
getopts('acdf:h');  # -a is boolean flag, -f takes an argument
                    # Sets $opt_* as a side effect.

$opt_h           && die_w_usage;
scalar @ARGV > 0 || die_w_usage;

if( scalar @ARGV == 1 && $opt_d ) {
   $opt_c = undef;
   $opt_d = undef;
   }

# stolen from my https://github.com/fwmechanic/file-collection-searcher/blob/master/search-files
sub gen_re_match_all_anyorder {
   my ($bound_re_before,$bound_re_after) = ( '(?:^|[\W_])', '(?:$|[\W_])' ); # can't use \b because $qm may not consist of word chars only
   my $bound_re = '(?:\b|[_])';
   my @reraw;
   for (@_) {  # construct regex matching lines containing, in any order, ALL of @_
      my $qm = quotemeta( $_ );            #  match fragment
      $qm = "$bound_re_before$qm$bound_re_after" if ($qm =~ m=[A-Z]=) && ! ($qm =~ m=[a-z]=); # all caps? match word
      push @reraw, "(?=.*$qm)"; # https://stackoverflow.com/questions/4389644/regex-to-match-string-containing-two-names-in-any-order
      }
   my $rv = '^(?i)' . join('',@reraw) . '.*$'; # print "\npat=$rv\n";
   return $rv;
   }

sub all_files {
   my @found;
   my $wanted = sub {
      return unless -f;
      return unless $File::Find::name =~ m|\.kdb$|i;
      push @found, $File::Find::name;
      };
   find( $wanted, $kdb_dnm );
   return sort @found;
   }

my @files;

if( $opt_a ) {     @files = all_files();  }
elsif( $opt_f ) {  @files = ( "$kdb_dnm/$opt_f" ); }
else {             @files = ( "$kdb_dnm/daily_notes.kdb" ); }

my $rex = gen_re_match_all_anyorder( @ARGV );

my $dtag = ''; # current diary-entry's date-tag (aka timestamp)
my @dtxt;      # current diary-entry's text (lines)
my ($chkDtxtMatch,$chkLnHit);  # methods
if( $opt_c ) {
   $chkDtxtMatch = sub {  # check if @dtxt matches
      my $all = join ' ', @dtxt;
      # print "ALL: " . $all, "\n";
      if( $all =~ m|$rex|o ) {
         $all =~ s/\W//g;
         if( $opt_d ) {  print $dtag,                           "\n"; }
         else {          print $dtag, ' ', join( "\n", @dtxt ), "\n"; }
         }
      }
   }
else {
   $chkLnHit = sub {
      if( m|$rex|o ) {
         s/^\s+|\s+$//g;
         print "$dtag:$_\n";  # $fnm:$.:
         }
      }
   }
for my $fnm ( @files ) {
   open my $ifh, '<', $fnm or die "abend cannot open $fnm for reading: $!\n";
   while (<$ifh>) {
      chomp;
    # my ($dt,$dow) = m/^(\d{8}(?:_\d{4,6})?)(\s+(?:Sunday|Sun|Monday|Mon|Tuesday|Tues|Tue|Wednesday|Wed|Thursday|Thurs|Thu|Thur|Friday|Fri|Saturday|Sat))?/;  # WORKS
      my ($dt,$dow) = m/^(\d{8}(?:_\d{4,6})?)(\s+(?:[SMTWF][unonuesednesdhursriatur]{2,5}day|Sun|Mon|Tues|Tue|Wed|Thurs|Thur|Thu|Fri|Sat)\b)?/;                # WORKS
      if( $dt ) {
         $chkDtxtMatch->() if $chkDtxtMatch;
         $dtag = substr $dt, 0, 8;
         # print $dtag . "\n";
         # print $dow . "#\n" if $dow;
         $_ = substr $_, length($dt) + ($dow ? length($dow) : 0);
         @dtxt = ( $_ );
         }
      else {
         push( @dtxt, $_ );
         }
      $chkLnHit->( $_ ) if $chkLnHit;
      }
   $chkDtxtMatch->() if $chkDtxtMatch;
   close $ifh;
   }

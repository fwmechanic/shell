#!/usr/bin/env perl
#
# A toolbox for working with ffmpeg to losslessly ('-c copy') cut video files.
# In this case ffmpeg interacts subtly with start times and file keyframes, so
# the best approach is to set -ss param value to exact time of nearest key frame.
# ffprobe must be used to find the timestamps of keyframes, and here we are able
# to find the closest keyframe according to whatever criteria we set.
#
# basis: https://stackoverflow.com/a/17688356

use strict;
use warnings;
use Getopt::Long;

sub max ($$) { $_[$_[0] < $_[1]] }  # https://www.perlmonks.org/?node_id=406885
sub min ($$) { $_[$_[0] > $_[1]] }

my ($ifnm,$ofnm,$tm,$verb,$tms,$fext);

sub extof { my($fnm)=@_;
   my($ext) = $fnm =~ m|(\.[^.]+)$|;
   return $ext;
   }

sub dhms_to_secs { my ($stm) = @_;
   my @st = split /:/, $stm;
   my @mhd = (60,60,24);
   my $rv = 0; my $ix = 0; my $mul = 1;
   for my $fr ( reverse @st ) {
      $rv += $fr * $mul;  #  print "mul=$mul fr=$fr\n";
      $mul *= $mhd[$ix++] || die "time $stm too big!\n";
      }
   return $rv;
   }

sub chkExtProc {
   die "close gave NZ \$! $!\n" unless $! == 0;
   if ( $? == -1 ) {
      print "Command failed to execute: $!\n";
      return -3;
      }
   elsif ( $? & 127 ) {
      printf "The child died with signal %d, %s a coredump\n", ( $? & 127 ), ( $? & 128 ) ? 'with' : 'without';
      return -2;
      }
   else {
      my $xc = $? >> 8;
      printf "child exited with value %d\n", $xc if $xc != 0;
      return $xc;
      }
   }

sub system_silent {
   my $cli = join( ' ', @_ ) . ' 2>&1';
   print 'system_silent: ', $cli, "\n";
   open my $ifh, '-|', $cli or die ;
   my $logfnm = 'ss.log';
   {
   open my $ofh, '>', $logfnm or die "failed opening $logfnm for writing: $!\n";
   print $ofh $_ while <$ifh>;
   close( $ifh );  # set $? for chkExtProc
   die "command failed\n" unless chkExtProc() == 0;
   }
   unlink $logfnm;
   }

sub vidclip { my ($ifnm, $ofnm, $t0, $t1) = @_;
   my @cli = ( 'ffmpeg', '-hide_banner', '-y', '-ss', $t0, '-i', "'$ifnm'", '-to', $t1, '-c', 'copy', $ofnm );
   system_silent( @cli );
   }

sub copy { my ($ifnm, $ofnm) = @_;
   my @cli = ( 'ffmpeg', '-hide_banner', '-y', '-i', "'$ifnm'", '-c', 'copy', $ofnm );
   system_silent( @cli );
   }

sub rmvpfx { my ($ifnm, $ofnm, $tms) = @_;  # "${FFMPEG:-"ffmpeg"}" -hide_banner -y -ss "$2" -i "$1" -c copy "out.$ext"
   my @cli = ( 'ffmpeg', '-hide_banner', '-y', '-ss', $tms, '-i', "'$ifnm'",              '-c', 'copy', $ofnm );
   system_silent( @cli );
   }

sub rmvsfx { my ($ifnm, $ofnm, $tms) = @_;  # ffmpeg -hide_banner -y -i "$1" -c copy -to "$2" "out.$ext"
   my @cli = ( 'ffmpeg', '-hide_banner', '-y', '-i', "'$ifnm'", '-to', $tms, '-c', 'copy', $ofnm );
   system_silent( @cli );
   }

sub ffp_vidfprint { my ($fnm) = @_;
   print "ffp_vidfprint $fnm\n" if $verb;
   my $cmd = 'ffprobe -v error -hide_banner -show_frames -print_format compact "'.$fnm.'" 2>&1' or die "cannot pipe from ffprobe: $!";
   open my $ifh, '-|', $cmd or die "cannot pipe from ffprobe: $!";
   my $first=1; my $acnt=0; my $vcnt=0; my $ts=0.0; my $seen_key = 0;
   while( <$ifh> ) {
      next unless /^frame\|/;
      #print if $first; $first=0;
      if( my($mtyp,$stidx,$iskey,$pts,$ptstime) = /\|media_type=(.).*\|stream_index=(\d+)\|key_frame=(\d)\|pts=(\d+)\|pts_time=(\d+\.\d+)\|/ ) {
         if( $mtyp eq 'v' ) {
            if( $iskey ) { # dump preceding interval
               printf "%12.6f L %12.6f k$seen_key v$vcnt, a$acnt\n", $ts, $ptstime - $ts;
               $ts = $ptstime;
               $seen_key = 1;
               $acnt=0; $vcnt=0;
               }
            else { ++$vcnt; }
            }
         else { ++$acnt; }
         }
      }
   }

sub vid_keyframe_before_rd_intvl { my ($fnm,$t0,$tms,$t1) = @_;  # https://stackoverflow.com/a/14011638
   print "vid_keyframe_before_rd_intvl+ $fnm,$t0,$tms,$t1\n";     # https://ffmpeg.org/ffprobe.html read_intervals
   # 20240717 pkt_pts_time (deprecated 21.12) replaced by pts_time.  https://lists.ffmpeg.org/pipermail/ffmpeg-trac/2021-December/060570.html
   my $cmd = 'ffprobe -v error -hide_banner -read_intervals '."$t0\%$t1".' -select_streams v:0 -skip_frame nokey -show_entries frame=pts_time,pkt_pts_time,key_frame -print_format compact "'.$fnm.'" 2>&1';
   print "vid_keyframe_before_rd_intvl: cmd=\n",$cmd,"\n" if $verb;
   my @keyframes = qx( $cmd );
   die "command failed\n" unless chkExtProc() == 0;
   my $best;

   for( @keyframes ) { #   # frame|key_frame=1|pts_time=593.926667  # key_frame is redundant since always 1 due to `-skip_frame nokey`
      if( my($ptstime) = /\|(?:pkt_)?pts_time=(\d+\.\d+)/ ) {
         print;
       # printf "%12.6f\n", $ptstime;
         if( $ptstime > $tms ) {  # choose between last kf before $tms (current $best) and first kf after $tms
            $best = $best && $tms - $best < $ptstime - $tms ? $best : $ptstime;
            last;
            }
         $best = $ptstime;
         }
      }
   die "no best pts_time found; invalid ffprobe -show_entries frame=XXX?\n" unless defined $best;
   if( defined $best && $best < $t0 || $best > $t1 ) {
      $best = undef;
      }
   else {
      print "vid_keyframe_before_rd_intvl= $best\n" if $verb;
      }
   return $best;
   }

sub rp_before { my($ifnm, $ofnm, $tms) = @_;
   for( my $win=5; $win<90; $win *= 2 ) {
      my $ts = vid_keyframe_before_rd_intvl($ifnm, max( $tms - $win, 0 ), $tms, $tms + $win);
      if( $ts ) {
         rmvpfx($ifnm,$ofnm,$ts);
         return;
         }
      }
   die "best_kf_in_window not found\n";
   }

# argv design:
# --if=input_filename
# --of=output_filename (optional; dflt="out.extof(--if)")
# --tm=time
my %steptbl = (
   cp   => sub { copy($ifnm,$ofnm); },
   rp   => sub { rp_before($ifnm,$ofnm,$tms); },
   rs   => sub { rmvsfx   ($ifnm,$ofnm,$tms); },
   pr   => sub { ffp_vidfprint($ifnm); },
   ofpr => sub { ffp_vidfprint($ofnm); },
 # o2i  => sub { push @ifstk, $ifnm; $ifnm = $ofnm; },
   o2i  => sub { $ifnm = $ofnm; },
 # popi => sub { $ifnm = $ofnm; },
   );

my $steps = 0;
sub step { my($arg) = @_; ++$steps;
   $ifnm or die "--if not set when step[$steps]=$arg\n";
   $fext = extof( $ifnm ); # includes leading '.'
   $ofnm //= "out";
   $ofnm .= $fext unless $ofnm =~ m|\Q$fext\E$|;
   $tm //= 0;
   $tms = dhms_to_secs($tm);
   print "step[$steps]: $arg w/ifnm=$ifnm, fext=$fext, ofnm=$ofnm, tms = $tms\n";
   my $sub = $steptbl{$arg} or die "unsupported step=$arg\n";
   $sub->( $arg );
   }

GetOptions( 'if=s' => \$ifnm, 'of=s' => \$ofnm, 'tm=s' => \$tm, 'verb=i' => \$verb, '<>' => \&step );

if( $steps == 0 ) {
   print "no steps specified, use ", join( ' ', sort keys %steptbl ), "\n";
   }

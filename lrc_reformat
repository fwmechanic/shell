#!/usr/bin/env -S uv --quiet run --script
# /// script
# requires-python = ">=3.13"
# dependencies = [
# ]
# ///
#

import argparse
import re
import textwrap

def process_line(line, width):
    """
    Process a single LRC line.
    If the line starts with a timestamp (e.g. [00:27.24] text),
    the text is wrapped so that:
      - The first line begins with the timestamp.
      - Any wrapped lines are indented to line up with the text.
    Otherwise, the line is wrapped normally.
    """
    m = re.match(r'(\[\d{2}:\d{2}\.\d{2}\])\s*(.*)', line)
    if m:
        timestamp = m.group(1)
        text = m.group(2)
        prefix = f"{timestamp} "
        indent = " " * len(prefix)
        wrapper = textwrap.TextWrapper(width=width,
                                       initial_indent=prefix,
                                       subsequent_indent=indent)
        return wrapper.fill(text)
    else:
        return textwrap.fill(line, width=width)

def process_block(block, width):
    """
    Process a block (paragraph) of lines by processing each line individually.
    """
    return "\n".join(process_line(line, width) for line in block)

def main():
    parser = argparse.ArgumentParser(
        description="Reformat an LRC transcription file by wrapping lines while preserving all timestamps."
    )
    parser.add_argument("input", help="Input LRC file")
    parser.add_argument("-w", "--width", type=int, default=80,
                        help="Maximum overall line width (default 80)")
    args = parser.parse_args()

    with open(args.input, "r") as f:
        lines = [line.rstrip("\n") for line in f]

    # Split file into blocks using blank lines as separators.
    blocks = []
    current = []
    for line in lines:
        if line.strip() == "":
            if current:
                blocks.append(current)
                current = []
        else:
            current.append(line)
    if current:
        blocks.append(current)

    # Process each block and join the results with a blank line in between.
    reformatted = "\n\n".join(process_block(block, args.width) for block in blocks)
    print(reformatted)

if __name__ == "__main__":
    main()

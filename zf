#!/usr/bin/env bash

die() { printf %s "${@+$@$'\n'}" 1>&2 ; exit 1 ; }
see() ( { set -x; } 2>/dev/null ; "$@" ) ;
dieifnotinpath() { command -v "$1" >/dev/null || die "$1 not in PATH"; }

dieifnotinpath 7z

mkdir_or_die() {  # if already exists, do nothing (existing contents not disturbed)
   [[ -d "$1" ]] || mkdir "$1" || die "could not mkdir $1"
   [[ -d "$1" ]] ||               die "mkdir $1 failed"
   }
zfdin="./_consumed" ; mkdir_or_die "$zfdin"     # when making a bulk run, it's handy to be able to verify outcome by comparing the # of
zfdout="./_output"  ; mkdir_or_die "$zfdout"    # in vs out files (empty before starting! TODO: add a common date-code prefix to $zfdin & $zfdout)

do1file() (
   fnm="$1"  # ; echo "fnm=$1'"
   [[ -f "$fnm" ]] || die "$fnm is not a file"

   # break down $fnm:
   fpath=""
   if [[ $fnm == */* ]]; then
      fpath="${fnm%/*}/"
      cd "$fpath" || die "cd to $fpath failed"
   fi                                   # ; echo "fpath=$fpath'"

   sanspath="${1##*/}"         ; echo "sanspath=$sanspath'"    # https://stackoverflow.com/a/965069
   ext="${sanspath##*.}"       ; echo "ext=$ext'"
   sansext="${sanspath%.*}"    ; echo "sansext=$sansext'"

   case "$ext" in
      mp3|mp4|m4a|m4b)
         see mkdir "$sansext" &&
         mv "$sanspath" "$sansext/" &&
         z1d "$sansext/" &&
         rm -rf "z1d_$sansext/" &&
         [[ -f "$sansext.zip" ]] &&
         mv "$sansext.zip" "$zfdout/"
         return ;;
   esac

   if [[ "$ext" == "mp3" ]]; then return ; fi

   [[ -d "$sansext" ]] && die "dir $sansext already exists"
   7z e -o"$sansext" "$1" || die "7z extraction failed"
   (cd "$sansext" && find . -type d -empty -delete)   # `7z e ...` can create empty dirs in output dir: delete them
   # above is common to various scripts: unzips $1 into a dir of its own name (minus extension)
   #
   # purpose: turn an input archive file (zip, rar) into a FLAT zip having
   #      within it a single directory bearing the basename of the source file
   #      (using z1d).
   #
   # why: so a simple decompress of the zip file on the end-use device
   #      (typically: phone) does not lose the name information embodied in the
   #      zip file's name; decompression of such a zip file results in a single
   #      new directory in the destination directory bearing the same name as the
   #      zipfile.  Decompressing many such zipfiles into a single destination
   #      directory (EX: phone's "Music" directory or "Audiobook" directory)
   #      keeps that directory well structured and easily maintainable, w/o any
   #      commingling of files from different zipfiles.
   #
   #      I chose zip file format because the Android Total Commander app does
   #      not (or: did not at the time this decision was made) have native unrar
   #      support, and aside from rar, zip is the most popular archive file
   #      format in the world (computer/phone users are most likely to have
   #      familiarity with it).  Also, there seem to be licensing constraints
   #      surrounding the creation of rar files, whereas I can easily create zip
   #      files cross-platform using 7z (7zip) or other tools.
   #
   #      RAR's main claim to fame seems to be support for error-correction
   #      records, at the cost of additional filesize needed to contain the error
   #      correction data records.  I figure a better approach is to have good
   #      backups of zip files at rest on my server.  Corruption during download
   #      is, since http came into use for downloads, no longer a problem, thus
   #      RAR adds no value in this regard.
   #
   #      Also, the audiobook and music "zip packages" I create here and
   #      elsewhere are *not* compressed, merely stored (because the content
   #      files (mp3, m4b, etc) are already compressed, and because I desire a
   #      low-overhead decompress operation on the phone), so use of alternate
   #      archive formats supporting higher degrees of compression is completely
   #      beside the point.
   #
   mv "$1" "$zfdin/"  # move input file (which might be a zip file) out of the way for z1d
   z1d_okdir="z1d_$sansext"  # z1d renames $sansext to this on success
   z1d_cleanup() { [[ -d "$z1d_okdir" ]] && rm -rf "$z1d_okdir" ; } # true iff dir existed and rm'd
   restore_input() { mv "$zfdin/$1" "./$1" ; }
   z1dof="$sansext.zip"
   z1d "$sansext"    || { z1d_cleanup ; restore_input "$1" ; die "z1d failed" ; }
   [[ -f "$z1dof" ]] || { z1d_cleanup ; restore_input "$1" ; die "expected z1d output file not found: $z1dof" ; }
   mv "$z1dof" "$zfdout/"
   z1d_cleanup || die "expected z1d-renamed dir not found: $z1d_okdir"
   echo "------------------------------- zf successful -------------------------------"
   )

for fnm in "$@"; do
   do1file "$fnm"
done

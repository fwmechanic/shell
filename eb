#!/usr/bin/env bash

die() { printf %s "${@+$@$'\n'}" 1>&2 ; exit 1 ; }

[[ "$1" ]] || die "missing archivenm param"
[[ -f "$1" ]] || die "$1 is not a file"

echo "arg=$1'"
sanspath="${1##*/}"       ; echo "sanspath=$sanspath'"    # https://stackoverflow.com/a/965069
sansext="${sanspath%.*}"  ; echo "sansext=$sansext'"
[[ -d "$sansext" ]] && die "dir $sansext already exists"

mkdir_or_die() {  # if already exists, do nothing (existing contents not disturbed)
   [[ -d "$1" ]] || mkdir "$1" || die "could not mkdir $1"
   [[ -d "$1" ]] ||               die "mkdir $1 failed"
   }
zfdin="./_consumed" ; mkdir_or_die "$zfdin"   # when making a bulk run, it's handy to be able to verify outcome by comparing the # of
zfdout="./_output"  ; mkdir_or_die "$zfdout"  # in vs out files (empty before starting! TODO: add a common date-code prefix to $zfdin & $zfdout)

7z e -o"$sansext" "$1" || die "7z extraction failed"
(cd "$sansext" && find . -type d -empty -delete)   # `7z e ...` can create empty dirs in output dir: delete them
# above is common to various scripts: unzips $1 into a dir of its own name (minus extension) ($sansext)

# purpose: given a typical ebook archive file (zip, rar) extracted into $sansext, delete non-ebook files and rename ebook files $sansext.ext

excl_nonebook_files() (
   set -e
   xdnm="interesting_files"
   mkdir_or_die "$xdnm"
   rm -rf "$xdnm"/*   # in case dir already existed, nuke its content
   # rmv typical "advertising" files embedded in www downloads; extensions that never contain content we want to keep
   find . -type f \( -iname "*.txt" -or -iname "*.html" -or -iname "*.jpg"  -or -iname "*.jpeg" -or -iname "*.png" \) -delete
   find . -type f ! \( -iname "*.epub" -or -iname "*.azw3" -or -iname "*.mobi" -or -iname "*.pdf" -or -iname "*.zip" \) -exec mv {} "$xdnm/" \;  # *.zip: "accompanying code" files
   rmdir "$xdnm" || die "$xdnm is not empty!"  # if nothing left, rmdir will succeed
   if [[ "$1" ]]; then
      newnm="$1"
      find . -type f | while read file; do mv "$file" "$newnm.${file##*.}" ; done   # https://stackoverflow.com/a/8489394
   fi
   )

(cd "$sansext" && excl_nonebook_files "$sansext") || die "excl_nonebook_files failed"
mv "$1" "$zfdin/" || die "mv $1 $zfdin/ FAILED" # move input file (which might be a zip file) into "done" dir
# set -x
mv "$sansext/"* "$zfdout/" || die "'mv $sansext/* $zfdout/' FAILED"
rmdir "$sansext" || die "mv did not empty $sansext/"

echo "------------------------------- eb successful -------------------------------"
